; prime  

; O(n^(1/2))
(define (smallest-divisor n)
  (define (divisor0 n test)
	  (cond ((> (* test test) n) n)
		  ((divides? n test) test)
			(else (divisor0 n (+ 1 test)))
	  )
	)

	(define (divides? a b)
	  (= (remainder a b) 0)
	)

	(divisor0 n 2)
)

(define (prime? n)
  (= (smallest-divisor n) n)
)

; base^(exp)%m
(define (expmod base exp m)
  (define (even? x)
    (= (remainder x 2) 0)
  )

	(define (square x)
	  (* x x)
	)
	
	(cond ((= exp 0) 1)
	  ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
		(else (remainder (* base (expmod base (- exp 1) m)) m))
  )
)

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a)
  )
  
  (try-it (+ 1 (random (- n 1))))
)

(define (fast-prime? n times)
  (cond ((= times 0) #t)
	  ((fermat-test n) (fast-prime? n (- times 1)))
		(else #f)
  )
)

; 1.22 exame time
(define (search-for-primes n t)
  (define (report-prime x elapsed-time)
	  (newline)
	  (display x)
    (display " *** ")
		(display elapsed-time)
  )

	(define (start-time-prime x start-time)
	  (if (prime? x) (report-prime x (- (runtime) start-time))
	  )
	)

	(define (isprime x y)
	  (start-time-prime x (runtime))
    (search-for-primes (+ 1 x) (- y 1))
	)
	
	(cond ((and (> t 0) (prime? n)) (isprime n t))
	  ((> t 0) (search-for-primes (+ n 1) t))
	)
)

; 1.23 
; next: using x = x + 2 (x != 2) 
(define (is-prime n)
  (define (next x)
    (if (= x 2) (+ 1 x) (+ 2 x)
    )
  )

	(define (divisor0 x test)
	  (cond ((> (* test test) x) x)
		  ((divides? x test) test)
			(else (divisor0 x (next test)))
	  )
	)

	(define (divides? a b)
	    (= (remainder a b) 0)
	)
  
  (define (smallest-divisor2 x)
	  (divisor0 x 2)
  )
  (= n (smallest-divisor2 n))
)

(define (search-primes1 n t)
  (define (report-prime x elapsed-time)
	  (newline)
	  (display x)
    (display " *** ")
		(display elapsed-time)
  )

	(define (start-time-prime x start-time)
	  (if (is-prime x) (report-prime x (- (runtime) start-time))
	  )
	)

	(define (isprime x y)
	  (start-time-prime x (runtime))
    (search-primes1 (+ 1 x) (- y 1))
	)
	
	(cond ((and (> t 0) (is-prime n)) (isprime n t))
	  ((> t 0) (search-primes1 (+ n 1) t))
	)
)

; 1.24 using fermat-exam 
(define (search-primes2 n t)
  (define (report-prime x elapsed-time)
	  (newline)
	  (display x)
    (display " *** ")
		(display elapsed-time)
  )

	(define (start-time-prime x start-time)
	  (if (fast-prime? n 10000) (report-prime x (- (runtime) start-time))
	  )
	)

	(define (isprime x y)
	  (start-time-prime x (runtime))
    (search-primes2 (+ 1 x) (- y 1))
	)
	
	(cond ((and (> t 0) (fast-prime? n 1)) (isprime n t))
	  ((> t 0) (search-primes2 (+ n 1) t))
	)
)

; 1.25 expmod2 : simple (base^exp)%m  <= 10000 can 
(define (feima-test x)
  (define (pow2i num counter)
    (define (even? n)
      (= (remainder n 2) 0)
    )
	  (define (square x)
	    (* x x)
	  )
    (define (pow-iter a n i)
      (cond ((= i 0) a)
		      ((even? i) (square (pow-iter a n (/ i 2))))
					(else (pow-iter (* a n) n (- i 1)))
      )
    )
    (pow-iter 1 num counter)
  )

  (define (expmod1 base exp m)
    (remainder (pow2i base exp) m)
  )

  (define (fermat-test1 n)
    (define (try-it1 a)
      (= (expmod1 a n n) a)
    )
    (try-it1 (+ 1 (random (- n 1))))
  )

  (define (fast-prime1? n times)
    (cond ((= times 0) #t)
	    ((fermat-test1 n) (fast-prime1? n (- times 1)))
		  (else #f)
    )
	)
	(fast-prime1? x 100)
)

; 1.27 
(define (feima-test2 x)
  (define (expmod base exp m)
    (define (even? x)
      (= (remainder x 2) 0)
    )
	  (define (square x)
	    (* x x)
	  )	
	  (cond ((= exp 0) 1)
	    ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
		  (else (remainder (* base (expmod base (- exp 1) m)) m))
    )
  )

  (define (fermat-test n a)
    (cond ((= a n) #t)
		    ((= (expmod a n n) a) (fermat-test n (+ a 1)))
				(else #f)
    )
  )
	(fermat-test x 1)
)

; 1.28
(define (mr-test y)
  (define (expmod base exp m)
    (define (even? x)
      (= (remainder x 2) 0)
    )
	  (define (square x n)
		  (if (and (not (and (= x 1) (= x (- n 1)))) (= (remainder (* x x) n) 1)) 0
		    (* x x)
			)
	  )	
	  (cond ((= exp 0) 1)
	    ((even? exp) (remainder (square (expmod base (/ exp 2) m) m) m))
		  (else (remainder (* base (expmod base (- exp 1) m)) m))
    )
  )

	(define (fermat-test n times)
    (define (try-it a)
      (= (expmod a (- n 1) n) 1)
    )
		(cond ((= 0 times) #t)
		   ((try-it (+ 1 (random (- n 1)))) (fermat-test n (- times 1)))
			 (else #f)		  
    )
  )
	(fermat-test y 100)
)
