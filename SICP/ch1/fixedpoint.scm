;fixed-point
(define (fixed-point f guess)
  (define tolerance 0.000001)
	(define (abs y)
    (cond ((< y 0) (- 0 y))
      (else y)
    )
  )
  (define (close-enough? v1 v2)
    (if (< (/ (abs (- v1 v2)) v2) tolerance) #t #f)
  )
  (define (try g)
    (let ((next (f g))) 
		  (if (close-enough? g next) next (try next))
    )
  ) 
	(try guess)
)

(define (sqrt x)
  (fixed-point (lambda (y) (/ (+ y (/ x y)) 2.0)) 1.0)
)

; 1.36 
(define (xx x)
  (define (fixed-point f guess)
    (define tolerance 0.000001)
	  (define (abs y)
      (cond ((< y 0) (- 0 y))
        (else y)
      )
    )
    (define (close-enough? v1 v2)
      (if (< (/ (abs (- v1 v2)) v2) tolerance) #t #f)
    )
		(define (discre t m n)
		  (newline)
			(display m)
			(t n)
		)
    (define (try g)
      (let ((next (f g))) 
		    (if (close-enough? g next) next (discre try g next))
      )
    ) 
	  (try guess)
  )
  (fixed-point (lambda (y) (/ (+ y (/ (log x) (log y))) 2.0)) 2.0)
)
