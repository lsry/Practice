(define (cons1 x y)
  (lambda (m) (cond ((= m 0) x)
                    ((= m 1) y)
                    (else (error "argument not 0 or 1 -- CONS" m))
              )     
  )
)

(define (car1 object)
  (object 0)
)

(define (cdr1 object)
  (object 1)
)

; 2.4  
(define (cons2 x y)
  (lambda (m) (m x y))
)

(define (car2 z)
  (z (lambda (p q) p))
)

(define (cdr2 z)
  (z (lambda (p q) q))
)

; 2.5 can't using negitive numbers  
(define (cons3 x y)
  (define (pow2i num counter)
    (define (even? n)
      (= (remainder n 2) 0)
    )
	  (define (square x)
	    (* x x)
	  )
    (define (pow-iter a n i)
      (cond ((= i 0) a)
		      ((even? i) (pow-iter a (square n) (/ i 2)))
					(else (pow-iter (* a n) n (- i 1)))
      )
    )
    (pow-iter 1 num counter)
  )
  (* (pow2i 2 x) (pow2i 3 y))
)

(define (car3 num)
  (define (cari x res)
    (if (= (remainder x 2) 0) (cari (/ x 2) (+ 1 res)) res)
  )
  (cari num 0)
)

(define (cdr3 num)
  (define (cdri x res)
    (if (= (remainder x 3) 0) (cdri (/ x 3) (+ 1 res)) res)
  )
  (cdri num 0)
)
