(define (assoc key records)
  (cond ((null? records) #f)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr records)))
  )
)

(define (lookup-single key table)
  (let ((record (assoc key (cdr table))))
       (if record (cdr record) #f)
  )
)

(define (insert-single! key value table)
  (let ((record (assoc key (cdr table))))
       (if record (set-cdr! record value)
           (set-cdr! table (cons (cons key value) (cdr table)))
       )
  )
)

(define (make-table)
  (list '*table*)
)

(define (lookup-double key-child key table)
  (let ((subtable (assoc key-child (cdr table))))
       (if subtable
           (let ((record (assoc key (cdr subtable))))
                (if record (cdr record) #f)
           )
           #f
       )
  )
)

(define (insert-double! key-child key value table)
  (let ((subtable (assoc key-child (cdr table))))
       (if subtable (let ((record (assoc key (cdr subtable))))
                         (if record (set-cdr! record value)
                                    (set-cdr! subtable (cons (cons key value) (cdr subtable)))
                         )
                    )
                    (set-cdr! table (cons (list key-child (cons key value)) (cdr table)))
       )
  )
)

(define (make-double-table)
  (let ((local-table (list '*table*))) 
       (define (look-up key-1 key-2)
         (let ((subtable (assoc key-1 (cdr local-table)))) 
              (if subtable (let ((record (assoc key-2 (cdr subtable))))
                                (if record (cdr record) #f)
                           )
                           #f
              )
         )
       )
       (define (insert! key-1 key-2 value)
         (let ((subtable (assoc key-1 (cdr local-table))))
              (if subtable (let ((record (assoc key-2 (cdr subtable)))) 
                                (if reocrd (set-cdr! record value)
                                           (set-cdr! subtable (cons (cons key-2 value) (cdr subtable)))
                                )
                           )
                           (set-cdr! local-table (cons (list key-1 (cons key-2 value)) (cdr local-table)))
              )
         )
       )
       (define (dispatch m)
         (cond ((eq? m 'lookup-proc) look-up)
               ((eq? m 'insert-proc) insert!)
               (else (error "Unknow operation -- TABLE" m))
         )
       )
       dispatch
  )
)

(define operation-table (make-double-table))

(define get (operation-table 'lookup-proc))

(define put (operation-table 'insert-proc))

; 3.24
(define (make-table-num same-key?)
  (define (assoc-num key records)
    (cond ((null? records) #f)
          ((same-key? key (caar records)) (car records))
          (else (assoc-num key (cdr records)))
    ) 
  )
  (let ((local-table (list '*table*))) 
       (define (look-up key-1 key-2)
         (let ((subtable (assoc-num key-1 (cdr local-table)))) 
              (if subtable (let ((record (assoc-num key-2 (cdr subtable))))
                                (if record (cdr record) #f)
                           )
                           #f
              )
         )
       )
       (define (insert! key-1 key-2 value)
         (let ((subtable (assoc-num key-1 (cdr local-table))))
              (if subtable (let ((record (assoc-num key-2 (cdr subtable)))) 
                                (if reocrd (set-cdr! record value)
                                           (set-cdr! subtable (cons (cons key-2 value) (cdr subtable)))
                                )
                           )
                           (set-cdr! local-table (cons (list key-1 (cons key-2 value)) (cdr local-table)))
              )
         )
       )
       (define (dispatch m)
         (cond ((eq? m 'lookup-num-proc) look-up)
               ((eq? m 'insert-num-proc) insert!)
               (else (error "Unknow operation -- TABLE" m))
         )
       )
       dispatch
  )
)

; 3.25
(define (make-mul-table)
  (define (assoc key records)
    (cond ((null? records) #f)
          ((equal? key (caar records)) (car records))
          (else (assoc key (cdr records)))
    )
  )
  (define (iter-assoc keys table)
    (if (null? keys) table
        (let ((records (assoc (car keys) table))) 
             (if records (iter-assoc (cdr keys) records) #f) 
        )
    )
  )
  (let ((local-table (list '*table*)))
       ()
  )
)
